<Project>

  <PropertyGroup>
    <MauiWorkloadVersion>@VERSION@</MauiWorkloadVersion>
    <MauiWorkloadTargetFramework>@TFM@</MauiWorkloadTargetFramework>
    <MauiVersion Condition=" '$(MauiVersion)' == '' ">$(MauiWorkloadVersion)</MauiVersion>
  </PropertyGroup>

  <!--
    These implicit <PackageReference/> pull dependencies from NuGet transitively.
    They are first added to the <_MauiImplicitPackageReference/> item group to list the the desired
    packages. Then the packages that were specified by the user are removed from the list. Finally,
    the remaining implicit packages are added into the project.

    This logic only installs packages if and only if $(UseMauiNuGets) is not true. This property
    allows the user to totally override all the default nugets installed. This should not be needed
    as the $(MauiVersion) should be sufficient. However, there may be a case to test various CI builds
    of .NET MAUI. One exception the this is that the <_MauiRequiredImplicitPackageReference/> item
    group is always installed as this is not maui dependencies but rather .NET support dependencies.
  -->
  <ItemGroup Condition=" '$(UseMauiAssets)' == 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Resizetizer" Version="$(MauiVersion)" PrivateAssets="all" />
  </ItemGroup>
  <ItemGroup Condition=" '$(UseMauiEssentials)' == 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Essentials" Version="$(MauiVersion)">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true' ">all</PrivateAssets>
    </_MauiImplicitPackageReference>
  </ItemGroup>
  <ItemGroup Condition=" '$(UseMauiCore)' == 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Core" Version="$(MauiVersion)">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true' ">all</PrivateAssets>
    </_MauiImplicitPackageReference>
  </ItemGroup>
  <ItemGroup Condition=" '$(UseMaui)' == 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true' ">all</PrivateAssets>
    </_MauiImplicitPackageReference>
  </ItemGroup>
  <ItemGroup Condition=" '$(UseMaui)' == 'true' and '$(UsingMicrosoftNETSdkRazor)' == 'true' ">
    <_MauiImplicitPackageReference Include="Microsoft.AspNetCore.Components.WebView.Maui" Version="$(MauiVersion)">
      <PrivateAssets Condition=" '$(OutputType)' == 'Library' and '$(AndroidApplication)' != 'true' ">all</PrivateAssets>
    </_MauiImplicitPackageReference>
  </ItemGroup>
  <ItemGroup Condition=" ('$(UseMaui)' == 'true' or '$(UseMauiCore)' == 'true') and ('$(TargetPlatformIdentifier)' == 'windows') ">
    <_MauiRequiredImplicitPackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="@MicrosoftWindowsSDKBuildToolsPackageVersion@" PrivateAssets="all" />
  </ItemGroup>
  <!-- Always install the required dependecies, such as build tools for the SDK itself -->
  <ItemGroup>
    <_MauiRequiredImplicitPackageReference Remove="@(PackageReference)" />
    <PackageReference Include="@(_MauiRequiredImplicitPackageReference)" />
  </ItemGroup>
  <!-- Install the nuget packages if we are supposed to -->
  <ItemGroup Condition=" '$(UseMauiNuGets)' != 'true' ">
    <_MauiImplicitPackageReference Remove="@(PackageReference)" />
    <PackageReference Include="@(_MauiImplicitPackageReference)" />
  </ItemGroup>

</Project>