parameters:
  platform : ''
  poolName: ''
  skipXcode: false
  skipVS: true
  skipProvisioning: $(skipProvisionator)
  checkoutDirectory: $(System.DefaultWorkingDirectory)
  provisionatorPath: $(provisionator.path)
  provisionatorXCodePath: $(provisionator.xcode)
  provisionatorVSPath: $(provisionator.vs)
  provisionatorChannel: 'latest'
  provisionatorExtraArguments: $(provisionator.extraArguments)
  gitHubToken : $(github--pat--vs-mobiletools-engineering-service2)

steps:
  # Prepare macOS
  - ${{ if eq(parameters.platform, 'macos') }}:
    - template: agent-cleanser/v1.yml@yaml-templates
      parameters:
        UninstallMono: false
        UninstallXamarinMac: false
        CleanseAgentToolsDotNet: true           # Cleanse all .NET versions under the agent tools directory and use only those provisioned by the pipeline
        SelfHealPowerShell: false
        AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)
    # Provision Xcode
    - ${{ if ne(parameters.skipXcode, 'true') }}:
      - task: xamops.azdevex.provisionator-task.provisionator@2
        displayName: 'Provision Xcode'
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorXCodePath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
    # Provision Additional Software
    - ${{ if ne(parameters.skipProvisioning, 'true') }}:
      - task: xamops.azdevex.provisionator-task.provisionator@2
        displayName: 'Provision Additional Software'
        continueOnError: true 
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorPath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}

    # Setup SDK Paths
    - bash: |
        echo "##vso[task.prependpath]/Library/Frameworks/Mono.framework/Versions/Current/Commands/"
        echo "##vso[task.prependpath]~/Library/Developer/Xamarin/android-sdk-macosx"
      displayName: 'Setup SDK Paths'
      condition: ne(variables['osx2019VmPool'], 'Azure Pipelines')
    # Setup JDK Paths
    - bash: |
        echo "##vso[task.setvariable variable=JI_JAVA_HOME]$(JAVA_HOME_11_X64)"
      displayName: 'Setup JDK Paths'
    # Configure VS Mac for Xcode
    - bash: |
        set -x
        mkdir -p ~/Library/Preferences/Xamarin
        rm -f ~/Library/Preferences/Xamarin/Settings.plist
        /usr/libexec/PlistBuddy -c "add :AppleSdkRoot string $(dirname $(dirname $(xcode-select -p)))" ~/Library/Preferences/Xamarin/Settings.plist || true
        cat ~/Library/Preferences/Xamarin/Settings.plist || true
      displayName: 'Configure Visual Studio'
    # Install Certificates and Provisioning Profiles
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install the iOS provisioning profile'
      inputs:
        provProfileSecureFile: 'Components iOS Provisioning.mobileprovision'
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install the macOS provisioning profile'
      inputs:
        provProfileSecureFile: 'Components Mac Provisioning.mobileprovision'
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install the tvOS provisioning profile'
      inputs:
        provProfileSecureFile: 'Components tvOS Provisioning.mobileprovision'
    - task: InstallAppleCertificate@2
      displayName: 'Install the iOS certificate'
      inputs:
        certSecureFile: 'Components iOS Certificate.p12'
    - task: InstallAppleCertificate@2
      condition: eq(variables['System.JobName'], 'macos')
      displayName: 'Install the macOS certificate'
      inputs:
        certSecureFile: 'Components Mac Certificate.p12'

  # Prepare Windows
  - ${{ if eq(parameters.platform, 'windows') }}:
    - powershell: |
        if (-not $(where.exe pwsh)) {
          $url = "https://github.com/PowerShell/PowerShell/releases/download/v$env:POWERSHELL_VERSION/PowerShell-$env:POWERSHELL_VERSION-win-x64.msi"
          $output = "$env:TEMP\PowerShell.msi"
          Remove-Item -Force $output -ErrorAction Ignore
          Invoke-WebRequest -Uri $url -OutFile $output
          msiexec.exe /package $output /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1
        }
      displayName: 'Install PowerShell Core'
    - ${{ if ne(parameters.skipVS, 'true') }}:
      - task: xamops.azdevex.provisionator-task.provisionator@2
        displayName: 'Provision Visual Studio'
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorVSPath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}
      - pwsh: |
          $msbuild = "$env:ProgramFiles/Microsoft Visual Studio/2022/Preview/MSBuild/Current/Bin/MSBuild.exe"
          echo "##vso[task.setvariable variable=MSBUILD_EXE]$msbuild"
        displayName: 'Setup MSBuild Paths'

    # Provision Additional Software
    - ${{ if ne(parameters.skipProvisioning, 'true') }}:
      - task: xamops.azdevex.provisionator-task.provisionator@2
        displayName: 'Provision Additional Software'
        inputs:
          provisioning_script: ${{ parameters.checkoutDirectory }}/${{ parameters.provisionatorPath }}
          provisioning_extra_args: ${{ parameters.provisionatorExtraArguments }}
          github_token: ${{ parameters.gitHubToken }}
        env:
          PROVISIONATOR_CHANNEL: ${{ parameters.provisionatorChannel }}

  # Prepare Both
  - task: UseDotNet@2                 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops
    displayName: 'Use .NET SDK 6'
    inputs:
      packageType: sdk
      version: 6.0.x

  - pwsh: |
      dotnet --version
      dotnet --list-sdks
    displayName: 'Show .NET SDK info'

  - pwsh: ./build.ps1 --target provision
    displayName: 'Cake Provision'
    condition: eq(variables['provisioningCake'], 'true')

  - task: PowerShell@2
    condition: eq(variables['PrivateBuild'], 'true')
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(System.DefaultWorkingDirectory)/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)
  - pwsh: dotnet nuget locals all --clear
    displayName: 'Clear all NuGet caches'

  # Prepare for Reunion packages
  # - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
  #   - task: NuGetAuthenticate@0
  #     displayName: 'Authenticate Reunion NuGet sources'
  #     inputs:
  #       nuGetServiceConnections: Project.Reunion.nuget.internal
  #   - pwsh: |
  #       $path = '$(Build.SourcesDirectory)\NuGet.config'
  #       [xml]$xml = Get-Content $path
  #       $xml.configuration.RemoveChild($xml.configuration.disabledPackageSources)
  #       $xml.Save($path)
  #     displayName: 'Add "wasdk-internal" to NuGet.config'
