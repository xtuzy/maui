steps:
  - checkout: self
    clean: true

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Xcode'
    condition: ne(variables['REQUIRED_XCODE'], '')
    inputs:
      provisioning_script: $(System.DefaultWorkingDirectory)/$(provisionator.xcode)
    env:
      AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provisionator'
    condition: eq(variables['provisioning'], 'true')
    inputs:
      provisioning_script: $(System.DefaultWorkingDirectory)/$(provisionator.path)
      provisioning_extra_args: $(provisionator.extraArguments)
    env:
      AUTH_TOKEN_GITHUB_COM: $(github--pat--vs-mobiletools-engineering-service2)

  - script: |
      echo "##vso[task.prependpath]/Library/Frameworks/Mono.framework/Versions/Current/Commands/"
      echo "##vso[task.prependpath]~/Library/Developer/Xamarin/android-sdk-macosx"
    displayName: 'Setup SDK Paths'
    condition: ne(variables['osx2019VmPool'], 'Azure Pipelines')

  - task: Bash@3
    displayName: 'Cake Provision'
    condition: eq(variables['provisioningCake'], 'true')
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target provision --TeamProject="$(System.TeamProject)"

  - task: UseDotNet@2
    displayName: 'Install .net core $(DOTNET_VERSION)'
    condition: ne(variables['DOTNET_VERSION'], '')
    inputs:
      version: $(DOTNET_VERSION)
      packageType: 'sdk'

  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install the iOS provisioning profile'
    inputs:
      provProfileSecureFile: 'Components iOS Provisioning.mobileprovision'
  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install the macOS provisioning profile'
    inputs:
      provProfileSecureFile: 'Components Mac Provisioning.mobileprovision'
  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install the tvOS provisioning profile'
    inputs:
      provProfileSecureFile: 'Components tvOS Provisioning.mobileprovision'
  - task: InstallAppleCertificate@2
    displayName: 'Install the iOS certificate'
    inputs:
      certSecureFile: 'Components iOS Certificate.p12'
  - task: InstallAppleCertificate@2
    condition: eq(variables['System.JobName'], 'macos')
    displayName: 'Install the macOS certificate'
    inputs:
      certSecureFile: 'Components Mac Certificate.p12'

  - task: Bash@3
    displayName: 'Build Control Gallery IPA'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios --configuration=$(BuildConfiguration)

  - task: Bash@3
    displayName: 'Build iOS UITests Tests'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios-build-tests --configuration=$(BuildConfiguration)

  - task: CopyFiles@2
    displayName: 'Copy iOS Files for UITest'
    inputs:
      Contents: |
        **/CompatibilityControlGalleryiOS.ipa
        **/iOS.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
        **/iOS.UITests/bin/$(BuildConfiguration)/nunit.*
        **/iOS.UITests/bin/$(BuildConfiguration)/NUnit3.*
        **/iOS.UITests/bin/$(BuildConfiguration)/Plugin.*
        **/iOS.UITests/bin/$(BuildConfiguration)/Microsoft.Maui.*
        **/iOS.UITests/bin/$(BuildConfiguration)/Xamarin.*
        **/iOS.UITests/bin/$(BuildConfiguration)/Controls.*
      TargetFolder: '$(build.artifactstagingdirectory)/ios'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy iOS dSYM'
    inputs:
      SourceFolder: 'src/Compatibility/ControlGallery/src/iOS/bin/iPhone/$(BuildConfiguration)/CompatibilityControlGalleryiOS.app.dSYM/'
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhone/CompatibilityControlGalleryiOS.app.dSYM/'
      CleanTargetFolder: false
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'Copy iOS App'
    inputs:
      SourceFolder: 'src/Compatibility/ControlGallery/src/iOS/bin/iPhoneSimulator/$(BuildConfiguration)/CompatibilityControlGalleryiOS.app/'
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhoneSimulator/CompatibilityControlGalleryiOS.app/'
      CleanTargetFolder: false
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'Copy test-cloud.exe'
    inputs:
      Contents: '**/Xamarin.UITest.*/tools/test-cloud.exe'
      TargetFolder: '$(build.artifactstagingdirectory)/testcloud'
      OverWrite: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy Cake File'
    inputs:
      Contents: |
        build.cake
        build/provisioning/provisioning.csx
        build/provisioning/xcode.csx
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: false
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: iOS'
    condition: always()
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: OSXArtifacts
